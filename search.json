[{"title":"HashTable","path":"/2023/02/08/HashTable/","content":"哈希表也称散列表，英文名Hash table。 哈希表是根据关键码的值而直接进行访问的数据结构。 “数组就是一张哈希表” ：数组的索引下标就对应哈希表中的关键码，通过下标直接访问数组中的元素。 作用：一般哈希表都是用来快速判断一个元素是否出现集合里。 例如要查询一个名字是否在这所学校里。 要枚举的话时间复杂度是O(n)，但如果使用哈希表的话， 只需要O(1)就可以做到。 我们只需要初始化把这所学校里学生的名字都存在哈希表里，在查询的时候通过索引直接就可以知道这位同学在不在这所学校里了。 将学生姓名映射到哈希表上就涉及到了hash function ，也就是哈希函数。 哈希函数将学生姓名直接映射为哈希表上的索引，通过查询索引下标快速判断学生是否在学校里。 如果hashCode值大于tableSize，就对其取模，如果学生数量大于哈希表大小，会导致几位学生的名字同时影射到哈希表的同一个索引下标的位置。 哈希碰撞小王和小李都映射到了索引下标1的位置成为哈希碰撞（Collisions）。 一般通过拉链法与线性探测法解决。 拉链法：两个元素都被存在索引1的位置上，存储在链表中，由此可以通过索引找到两个元素。 “其实拉链法就是要选择适当的哈希表的大小，这样既不会因为数组空值而浪费大量内存，也不会因为链表太长而在查找上浪费太多时间。” 线性探测法保证哈希表大小（tableSize）大于数据规模（dataSize）。依靠哈希表中的空位来解决碰撞问题。 “例如冲突的位置，放了小李，那么就向下找一个空位放置小王的信息。所以要求tableSize一定要大于dataSize。” 总结用处：快所安段一个元素是否出现在集合里 弊端：牺牲空间换取时间（要使用额外的数组、set或者map来存放数据）","categories":["数据结构"]},{"title":"Hello World","path":"/2023/02/08/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]